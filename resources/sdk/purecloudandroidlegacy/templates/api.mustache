package {{package}};

import com.fasterxml.jackson.core.type.TypeReference;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiRequest;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{invokerPackage}}.Pair;

{{#imports}}import {{import}};
{{/imports}}

{{#operations}}{{#operation}}
import {{package}}.request.{{requestClassname}};{{/operation}}{{/operations}}

import java.io.IOException;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
  private final ApiClient {{localVariablePrefix}}apiClient;

  public {{classname}}() {
    this(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    this.{{localVariablePrefix}}apiClient = apiClient;
  }

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}{{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}{{#returnType}}
   * @return {{{returnType}}}{{/returnType}}
   * @throws ApiException if the request fails on the server
   * @throws IOException if the request fails to be processed
   */
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws IOException, ApiException {
    {{#returnType}}return {{/returnType}} {{operationId}}(create{{requestClassname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}));
  }

  /**
   * {{summary}}
   * {{notes}}{{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}{{#returnType}}
   * @return {{{returnType}}}{{/returnType}}
   * @throws IOException if the request fails to be processed
   */
  public ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws IOException {
    return {{operationId}}(create{{requestClassname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}).withHttpInfo());
  }

  private {{requestClassname}} create{{requestClassname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    return {{requestClassname}}.builder(){{#allParams}}
            .with{{paramTitle}}({{paramName}})
    {{/allParams}}
            .build();
  }

  /**
   * {{summary}}
   * {{notes}}
   * @param request The request object{{#returnType}}
   * @return {{{returnType}}}{{/returnType}}
   * @throws ApiException if the request fails on the server
   * @throws IOException if the request fails to be processed
   */
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{requestClassname}} request) throws IOException, ApiException {
    try {
      ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> response = {{localVariablePrefix}}apiClient.invoke(request.withHttpInfo(), {{#returnType}}new TypeReference<{{{returnType}}}>() {}{{/returnType}}{{^returnType}}null{{/returnType}});
      {{#returnType}}return response.getBody();{{/returnType}}
    }
    catch (ApiException | IOException exception) {
      if ({{localVariablePrefix}}apiClient.getShouldThrowErrors()) throw exception;
      {{#returnType}}return null;{{/returnType}}
    }
  }

  /**
   * {{summary}}
   * {{notes}}
   * @param request The request object
   * @return the response
   * @throws IOException if the request fails to be processed
   */
  public {{#returnType}}ApiResponse<{{{returnType}}}>{{/returnType}}{{^returnType}}ApiResponse<Void>{{/returnType}} {{operationId}}(ApiRequest<{{#bodyParam}}{{{dataType}}}{{/bodyParam}}{{^bodyParam}}Void{{/bodyParam}}> request) throws IOException {
    try {
      return {{localVariablePrefix}}apiClient.invoke(request, {{#returnType}}new TypeReference<{{{returnType}}}>() {}{{/returnType}}{{^returnType}}null{{/returnType}});
    }
    catch (ApiException exception) {
      @SuppressWarnings("unchecked")
      ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> response = (ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>)(ApiResponse<?>)exception;
      return response;
    }
    catch (Throwable exception) {
      if ({{localVariablePrefix}}apiClient.getShouldThrowErrors()) {
        if (exception instanceof IOException) {
          throw (IOException)exception;
        }
        throw new RuntimeException(exception);
      }
      @SuppressWarnings("unchecked")
      ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> response = (ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>)(ApiResponse<?>)(new ApiException(exception));
      return response;
    }
  }

  {{/operation}}
}
{{/operations}}